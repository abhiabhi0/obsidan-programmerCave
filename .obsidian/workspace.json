{
  "main": {
    "id": "4d1f1fc1797b29d0",
    "type": "split",
    "children": [
      {
        "id": "34d20c3b7d8db301",
        "type": "tabs",
        "children": [
          {
            "id": "5393ec9ce544d4a8",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "LLD/07 - Creational Design Patterns - Singleton and Builder.md",
                "mode": "source",
                "backlinks": true,
                "source": false
              },
              "icon": "lucide-file",
              "title": "07 - Creational Design Patterns - Singleton and Builder"
            }
          },
          {
            "id": "61c1bd90d15454a9",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "LLD/08 - Creational Design Patterns - Prototype, Factory Method and Abstract Factory.md",
                "mode": "source",
                "backlinks": true,
                "source": false
              },
              "icon": "lucide-file",
              "title": "08 - Creational Design Patterns - Prototype, Factory Method and Abstract Factory"
            }
          },
          {
            "id": "ebd7b5dec80abd79",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "LLD/09 - Structural Design Patterns - Adapter and Flyweight.md",
                "mode": "source",
                "backlinks": true,
                "source": false
              },
              "icon": "lucide-file",
              "title": "09 - Structural Design Patterns - Adapter and Flyweight"
            }
          },
          {
            "id": "589c0ac4bf688622",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "LLD/10 - Structural Design Patterns - Decorator and Facade.md",
                "mode": "source",
                "backlinks": true,
                "source": false
              },
              "icon": "lucide-file",
              "title": "10 - Structural Design Patterns - Decorator and Facade"
            }
          },
          {
            "id": "000d226cda6f5167",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "LLD/11 - Behavioural Design Patterns - Observer and Strategy.md",
                "mode": "source",
                "backlinks": true,
                "source": false
              },
              "icon": "lucide-file",
              "title": "11 - Behavioural Design Patterns - Observer and Strategy"
            }
          },
          {
            "id": "23b6b0284e02ece8",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "LLD/05 - SOLID - Single Responsibility, Open-Closed Principle.md",
                "mode": "source",
                "backlinks": true,
                "source": false
              },
              "icon": "lucide-file",
              "title": "05 - SOLID - Single Responsibility, Open-Closed Principle"
            }
          },
          {
            "id": "940cb2769ed930c2",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "LLD/06 - SOLID - Liskov Substitution, Interface Segregation, and Dependency Inversion.md",
                "mode": "source",
                "backlinks": true,
                "source": false
              },
              "icon": "lucide-file",
              "title": "06 - SOLID - Liskov Substitution, Interface Segregation, and Dependency Inversion"
            }
          },
          {
            "id": "b083f1b828dcd30d",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "Java/Design Patterns.md",
                "mode": "source",
                "backlinks": true,
                "source": false
              },
              "icon": "lucide-file",
              "title": "Design Patterns"
            }
          },
          {
            "id": "34e9491e8f0afd6e",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "Java/Diamond Problem in Java.md",
                "mode": "source",
                "backlinks": true,
                "source": false
              },
              "icon": "lucide-file",
              "title": "Diamond Problem in Java"
            }
          },
          {
            "id": "4af8bbacb5c7b7c4",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "Interview Prep/Kafka/02 - Message Delivery Guarantees in Kafka.md",
                "mode": "source",
                "backlinks": true,
                "source": false
              },
              "icon": "lucide-file",
              "title": "02 - Message Delivery Guarantees in Kafka"
            }
          }
        ],
        "currentTab": 8
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "590516e80920d713",
    "type": "split",
    "children": [
      {
        "id": "7cac4d77185aa7f5",
        "type": "tabs",
        "children": [
          {
            "id": "b4904ce9751ea41b",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical"
              },
              "icon": "lucide-folder-closed",
              "title": "Files"
            }
          },
          {
            "id": "d59691f8b8b70e9c",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "how does proto",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              },
              "icon": "lucide-search",
              "title": "Search"
            }
          },
          {
            "id": "e12744f22cb74856",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {},
              "icon": "lucide-bookmark",
              "title": "Bookmarks"
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 334.50418853759766
  },
  "right": {
    "id": "107f5edfe773bdb6",
    "type": "split",
    "children": [
      {
        "id": "3cdc6cb448adcac1",
        "type": "tabs",
        "children": [
          {
            "id": "846cf53ff19fec75",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "Java/Diamond Problem in Java.md"
              },
              "icon": "lucide-list",
              "title": "Outline of Diamond Problem in Java"
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 341.5
  },
  "left-ribbon": {
    "hiddenItems": {
      "obsidian-custom-frames:Open ChatGPT": false,
      "omnisearch:Omnisearch": false,
      "switcher:Open quick switcher": false,
      "graph:Open graph view": false,
      "canvas:Create new canvas": false,
      "command-palette:Open command palette": false,
      "obsidian-excalidraw-plugin:Create new drawing": false
    }
  },
  "active": "34e9491e8f0afd6e",
  "lastOpenFiles": [
    "Java/Design Patterns.md",
    "LLD/11 - Behavioural Design Patterns - Observer and Strategy.md",
    "LLD/10 - Structural Design Patterns - Decorator and Facade.md",
    "LLD/09 - Structural Design Patterns - Adapter and Flyweight.md",
    "LLD/08 - Creational Design Patterns - Prototype, Factory Method and Abstract Factory.md",
    "LLD/07 - Creational Design Patterns - Singleton and Builder.md",
    "LLD/06 - SOLID - Liskov Substitution, Interface Segregation, and Dependency Inversion.md",
    "LLD/05 - SOLID - Single Responsibility, Open-Closed Principle.md",
    "Interview Prep/Kafka/02 - Message Delivery Guarantees in Kafka.md",
    "LLD/04 - Polymorphism.md",
    "LLD/03 - Constructor, Access modifiers, Inheritance, Diamond Problem.md",
    "LLD/02 - Object-oriented programming (OOP).md",
    "LLD/01 - Introduction.md",
    "LLD/00 - Index.md",
    "Java/Dependency Injection.md",
    "Java/Collections.md",
    "Java/Anonymous Class.md",
    "Interview Prep/01 - Resume Questions/02 - gRPC Service Questions.md",
    "Interview Prep/01 - Resume Questions/03 - Kafka Producer and Consumer Questions.md",
    "Interview Prep/Kafka/03 - How the Consumer Handled Failures Gracefully.md",
    "Interview Prep/Kafka/01 - Why Kafka Was Chosen for Message Processing.md",
    "Interview Prep/Kafka",
    "Interview Prep/GRPC/13 - Challenges Faced While Implementing the gRPC Service.md",
    "Interview Prep/JSON Web Token (JWT).md",
    "Untitled.md",
    "Interview Prep/01 - Resume Questions/01 - Ruby Monolith to Go-Based Microservices Decomposition.md",
    "Golang/Goâ€™s Static Typing and Single Binary Deployment.md",
    "Interview Prep/01 - Resume Questions",
    "Interview Prep/GRPC",
    "DSA/Dynamic Programming",
    "DSA/Hashing",
    "DSA/Array",
    "DSA/Two Pointers",
    "DSA/Binary Search",
    "DSA/Heap",
    "DSA/Subset and Subsequence",
    "Pasted image 20240603131241.png",
    "Pasted image 20240604102843.png",
    "Pasted image 20240622221813.png",
    "Pasted image 20240625174445.png",
    "Untitled.canvas",
    "{40406506-B515-4027-9F76-E876EFFF6A52}.png",
    "{83C64CEA-B5C9-46DD-8E6D-5E3D6C0BDC22}.png",
    "{8A8DDE8D-1119-4ABC-AF90-4B4C908F4D7D}.png",
    "{6B34DB5F-7646-477A-8243-1E8BA8A8C0BB}.png",
    "{FB486C91-55BB-4F7F-84C2-B312B5B4ABA2}.png",
    "{83289A2E-3DF1-4003-8389-26C48AB69B96}.png",
    "Untitled 1.canvas"
  ]
}